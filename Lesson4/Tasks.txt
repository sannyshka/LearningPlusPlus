Task1

#include <iostream>







int main()

{

double num1, num2, num3;



std::cout << "Enter the first number: ";

std::cin >> num1;

std::cout << "Enter the second number: ";

std::cin >> num2;

std::cout << "Enter the third number: ";

std::cin >> num3;



double maxNumber = num1;

if (num2 > maxNumber) {

maxNumber = num2;

}

if (num3 > maxNumber) {

maxNumber = num3;

}

std::cout << "Max number: " << maxNumber << std::endl;



return 0;

}



Task2

#include <iostream>







int main()

{

double num1, num2;

std::cout << "Enter the first number: ";

std::cin >> num1;

std::cout << "Enter the second number: ";

std::cin >> num2;



double minNumber = (num1 < num2) ? num1 : num2;



std::cout << "Min number: " << minNumber << std::endl;



return 0;

}



Task3

#include <iostream>







int main()

{

int number;

std::cout << "Enter the number: ";

std::cin >> number;



bool isDivisible = (number % 5 == 0) && (number % 11 == 0);



if (isDivisible) {

std::cout << number << " the whole is divisible by 5 and 11 at the same time" << std::endl;

}

else {

std::cout << number << " is not exactly divisible by 5 and 11 at the same time" << std::endl;

}

return 0;

}



Task4



#include <iostream>







int main()

{

int angle1, angle2, angle3;



std::cout << "Enter the first angle: ";

std::cin >> angle1;

std::cout << "Enter the second angle: ";

std::cin >> angle2;

std::cout << "Enter the third angle: ";

std::cin >> angle3;



bool formsTriangle = (angle1 + angle2 + angle3 == 180);



if (formsTriangle) {

std::cout << "These angles can form a triangle." << std::endl;

}

else {

std::cout << "These angles can't form a triangle" << std::endl;

}



return 0;

}



Task5

#include <iostream>



enum class Month {

January = 1, February, March, April, May, June, July, August, September, October, November, December

};





int main()

{

int monthNumber;

std::cout << "Enter number of month: ";

std::cin >> monthNumber;



Month inputMonth = static_cast<Month>(monthNumber);



switch (inputMonth) {

case Month::January:

std::cout << "January" << std::endl;

break;

case Month::February:

std::cout << "February" << std::endl;

break;

case Month::March:

std::cout << "March" << std::endl;

break;

case Month::April:

std::cout << "April" << std::endl;

break;

case Month::May:

std::cout << "May" << std::endl;

break;

case Month::June:

std::cout << "June" << std::endl;

break;

case Month::July:

std::cout << "July" << std::endl;

break;

case Month::August:

std::cout << "August" << std::endl;

break;

case Month::September:

std::cout << "September" << std::endl;

break;

case Month::October:

std::cout << "October" << std::endl;

break;

case Month::November:

std::cout << "November" << std::endl;

break;

case Month::December:

std::cout << "December" << std::endl;

break;

}



return 0;

}



Task6

#include <iostream>



enum class Season {

Spring, Summer, Autumn, Winter

};







int main()

{

int monthNumber;

std::cout << "Enter number of month (1-12): ";

std::cin >> monthNumber;



Season currentSeason;



switch (monthNumber) {

case 3:

case 4:

case 5:

currentSeason = Season::Spring;

break;

case 6:

case 7:

case 8:

currentSeason = Season::Summer;

break;

case 9:

case 10:

case 11:

currentSeason = Season::Autumn;

break;

case 12:

case 1:

case 2:

currentSeason = Season::Winter;

break;

default:

std::cout << "Error: Invalid month number." << std::endl;

return 1;

}



switch (currentSeason) {

case Season::Spring:

std::cout << "Spring" << std::endl;

break;

case Season::Summer:

std::cout << "Summer" << std::endl;

break;

case Season::Autumn:

std::cout << "Autumn" << std::endl;

break;

case Season::Winter:

std::cout << "Winter" << std::endl;

break;

}



return 0;

}